

pipeline {
    agent any

       environment {
        registry = "756519817970.dkr.ecr.us-east-2.amazonaws.com/postboard-server"
    }
    stages {
        stage('Checkout') {
            steps {
              checkout scmGit(branches: [[name: '*/production']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/chiemelaumeh/reddit-server']])
            }
        }
        
        stage("Code Coverage") {
            steps {
            jacoco()
            }
        }


        stage('Install dependencies') {
        steps {
        sh 'npm install'
      }
    }

  // stage("SonarQube analysis") {
  //   steps {
  //           withSonarQubeEnv('SonarQube') {
  //               sh "npm install sonar-scanner"
  //               sh "npm run sonar"
  //           }
        
  //   }
  // }



 stage ('DEV Notify')  {
steps {

       slackSend(channel:'postboard-server-pipeline', message: "Job is successful, here is the info -  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
   }
}


 stage ('DEV Approve')  {
            steps {

            echo "Taking approval from DEV Manager for QA Deployment"     
            timeout(time: 7, unit: 'DAYS') {
            input message: 'Do you approve QA Deployment?', submitter: 'admin'
            }

}

     }




       stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry
        }
      }
    }


  
 stage ('DEV Notify')  {
steps {

       slackSend(channel:'postboard-server-pipeline', message: "Docker Image Built-  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
   }
}

     stage('Pushing to ECR') {
     steps{  
         script {
                sh 'aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 756519817970.dkr.ecr.us-east-2.amazonaws.com'
                sh 'docker push 756519817970.dkr.ecr.us-east-2.amazonaws.com/postboard-server:latest'
         }
        }
      }
   

           // Stopping Docker containers for cleaner Docker run
    //  stage('stop previous containers') {
    //      steps {
    //         sh 'docker ps -f name=postboard-container -q | xargs --no-run-if-empty docker container stop'
    //         sh 'docker container ls -a -fname=mypythonContainer -q | xargs -r docker container rm'
    //      }
    //    }



 stage ('DEV Notify')  {
steps {

       slackSend(channel:'postboard-server-pipeline', message: "Docker Image Pushed to ECR, here is the info -  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
   }
}



    stage('Docker Run') {
     steps{
         script {
                sh 'docker run -d -p 8096:4000 --rm --name postboard-container 756519817970.dkr.ecr.us-east-2.amazonaws.com/postboard-server:latest'
            }
      }
    }


 stage ('DEV Notify')  {
steps {

       slackSend(channel:'postboard-server-pipeline', message: "Docker container ran, here is the info -  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
   }
}
   
 }   
}
